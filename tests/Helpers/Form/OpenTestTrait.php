<?php
declare(strict_types=1);

namespace Tests\Helpers\Form;

use Fyre\Security\CsrfProtection;
use Fyre\Server\ServerRequest;
use Fyre\Utility\HtmlHelper;
use Fyre\View\View;

use function preg_match;

trait OpenTestTrait
{
    public function testOpen(): void
    {
        $this->assertSame(
            '<form action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open()
        );
    }

    public function testOpenAction(): void
    {
        $this->assertSame(
            '<form action="/test/test-method" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                'action' => '/test/test-method',
            ])
        );
    }

    public function testOpenAttributeArray(): void
    {
        $this->assertSame(
            '<form data-test="[1,2]" action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                'data-test' => [1, 2],
            ])
        );
    }

    public function testOpenAttributeEscape(): void
    {
        $this->assertSame(
            '<form data-test="&lt;test&gt;" action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                'data-test' => '<test>',
            ])
        );
    }

    public function testOpenAttributeInvalid(): void
    {
        $this->assertSame(
            '<form class="test" action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                '*class*' => 'test',
            ])
        );
    }

    public function testOpenAttributes(): void
    {
        $this->assertSame(
            '<form class="test" id="form" action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                'class' => 'test',
                'id' => 'form',
            ])
        );
    }

    public function testOpenAttributesOrder(): void
    {
        $this->assertSame(
            '<form class="test" id="form" action="/test" method="post" charset="UTF-8">',
            $this->view->Form->open(null, [
                'id' => 'form',
                'class' => 'test',
            ])
        );
    }

    public function testOpenCharset(): void
    {
        $this->container->use(HtmlHelper::class)->setCharset('ISO-8859-1');

        $this->assertSame(
            '<form action="/test" method="post" charset="ISO-8859-1">',
            $this->view->Form->open()
        );
    }

    public function testOpenCsrf(): void
    {
        $csrfProtection = $this->container->use(CsrfProtection::class);
        $request = $this->view->getRequest();

        $request = $request->setParam('csrf', $csrfProtection);

        $view = $this->container->build(View::class, ['request' => $request]);

        $open = $view->Form->open();

        preg_match('/^<form action="\/test" method="post" charset="UTF-8"><input name="csrf_token" type="hidden" value="(.*)" \/>$/', $open, $match);

        $userToken = $match[1];

        $request = $this->container->build(ServerRequest::class, [
            'options' => [
                'method' => 'post',
                'globals' => [
                    'cookie' => [
                        'CsrfToken' => $csrfProtection->getCookieToken(),
                    ],
                    'post' => [
                        'csrf_token' => $userToken,
                    ],
                ],
            ],
        ]);

        $request = $csrfProtection->checkToken($request);

        $this->assertSame(
            $csrfProtection,
            $request->getParam('csrf')
        );
    }
}
